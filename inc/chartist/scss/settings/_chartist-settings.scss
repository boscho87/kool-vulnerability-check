// Scales for responsive SVG containers
$ct-scales: ((1), (15/16), (8/9), (5/6), (4/5), (3/4), (2/3), (5/8), (1/1.618), (3/5), (9/16), (8/15), (1/2), (2/5), (3/8), (1/3), (1/4)) !default;
$ct-scales-names: (ct-square, ct-minor-second, ct-major-second, ct-minor-third, ct-major-third, ct-perfect-fourth, ct-perfect-fifth, ct-minor-sixth, ct-golden-section, ct-major-sixth, ct-minor-seventh, ct-major-seventh, ct-octave, ct-major-tenth, ct-major-eleventh, ct-major-twelfth, ct-double-octave) !default;

// Class names to be used when generating CSS
$ct-class-chart: ct-chart !default;
$ct-class-chart-line: ct-chart-line !default;
$ct-class-chart-bar: ct-chart-bar !default;
$ct-class-horizontal-bars: ct-horizontal-bars !default;
$ct-class-chart-pie: ct-chart-pie !default;
$ct-class-chart-donut: ct-chart-donut !default;
$ct-class-label: ct-label !default;
$ct-class-series: ct-series !default;
$ct-class-line: ct-line !default;
$ct-class-point: ct-point !default;
$ct-class-area: ct-area !default;
$ct-class-bar: ct-bar !default;
$ct-class-slice-pie: ct-slice-pie !default;
$ct-class-slice-donut: ct-slice-donut !default;
$ct-class-grid: ct-grid !default;
$ct-class-vertical: ct-vertical !default;
$ct-class-horizontal: ct-horizontal !default;
$ct-class-start: ct-start !default;
$ct-class-end: ct-end !default;

// Container ratio
$ct-container-ratio: (1/1.618) !default;

// Text styles for labels
$ct-text-color: rgba(0, 0, 0, 0.4) !default;
$ct-text-size: 0.9em !default; // $ct-text-size: 0.75rem !default;
$ct-text-align: flex-start !default;
$ct-text-justify: flex-start !default;
$ct-text-line-height: 1;

// Grid styles
$ct-grid-color: rgba(0, 0, 0, 0.2) !default;
$ct-grid-dasharray: 2px !default;
$ct-grid-width: 1px !default;

// Line chart properties
$ct-line-width: 2px !default;
$ct-line-dasharray: false !default;
$ct-point-size: 10px !default;
// Line chart point, can be either round or square
$ct-point-shape: round !default;
// Area fill transparency between 0 and 1
$ct-area-opacity: 0.1 !default;

// Bar chart bar width
$ct-bar-width: 12px !default;

// Donut width (If donut width is to big it can cause issues where the shape gets distorted)
$ct-donut-width: 60px !default;

// If set to true it will include the default classes and generate CSS output. If you're planning to use the mixins you
// should set this property to false
$ct-include-classes: true !default;

// If this is set to true the CSS will contain colored series. You can extend or change the color with the
// properties below
$ct-include-colored-series: $ct-include-classes !default;

// If set to true this will include all responsive container variations using the scales defined at the top of the script
$ct-include-alternative-responsive-containers: $ct-include-classes !default;

// Series names and colors. This can be extended or customized as desired. Just add more series and colors.
$ct-series-names: (a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z) !default;

/*$ct-series-delta-hue-angle: 360 / 26 + 180;
$ct-series-base-color: #d70206;
$ct-series-colors: (
  adjust_hue($ct-series-base-color, 0 * $ct-series-delta-hue-angle * 1deg),
  adjust_hue($ct-series-base-color, 1 * $ct-series-delta-hue-angle * 1deg),
  adjust_hue($ct-series-base-color, 2 * $ct-series-delta-hue-angle * 1deg),
  adjust_hue($ct-series-base-color, 3 * $ct-series-delta-hue-angle * 1deg),
  adjust_hue($ct-series-base-color, 4 * $ct-series-delta-hue-angle * 1deg),
  adjust_hue($ct-series-base-color, 5 * $ct-series-delta-hue-angle * 1deg),
  adjust_hue($ct-series-base-color, 6 * $ct-series-delta-hue-angle * 1deg),
  adjust_hue($ct-series-base-color, 7 * $ct-series-delta-hue-angle * 1deg),
  adjust_hue($ct-series-base-color, 8 * $ct-series-delta-hue-angle * 1deg),
  adjust_hue($ct-series-base-color, 9 * $ct-series-delta-hue-angle * 1deg),
  adjust_hue($ct-series-base-color, 10 * $ct-series-delta-hue-angle * 1deg),
  adjust_hue($ct-series-base-color, 11 * $ct-series-delta-hue-angle * 1deg),
  adjust_hue($ct-series-base-color, 12 * $ct-series-delta-hue-angle * 1deg),
  adjust_hue($ct-series-base-color, 13 * $ct-series-delta-hue-angle * 1deg),
  adjust_hue($ct-series-base-color, 14 * $ct-series-delta-hue-angle * 1deg),
  adjust_hue($ct-series-base-color, 15 * $ct-series-delta-hue-angle * 1deg),
  adjust_hue($ct-series-base-color, 16 * $ct-series-delta-hue-angle * 1deg),
  adjust_hue($ct-series-base-color, 17 * $ct-series-delta-hue-angle * 1deg),
  adjust_hue($ct-series-base-color, 18 * $ct-series-delta-hue-angle * 1deg),
  adjust_hue($ct-series-base-color, 19 * $ct-series-delta-hue-angle * 1deg),
  adjust_hue($ct-series-base-color, 20 * $ct-series-delta-hue-angle * 1deg),
  adjust_hue($ct-series-base-color, 21 * $ct-series-delta-hue-angle * 1deg),
  adjust_hue($ct-series-base-color, 22 * $ct-series-delta-hue-angle * 1deg),
  adjust_hue($ct-series-base-color, 23 * $ct-series-delta-hue-angle * 1deg),
  adjust_hue($ct-series-base-color, 24 * $ct-series-delta-hue-angle * 1deg),
  adjust_hue($ct-series-base-color, 25 * $ct-series-delta-hue-angle * 1deg),
) !default;*/
$ct-series-colors: (
  #c0392b,
  #59922b,
  #6b0392,
  #3498db,
  #d70206,
  #eacf7d,
  #0544d3,
  #b2c326,
  #d35400,
  #9b59b6,
  #f39c12,
  #34495e,
  #f1c40f,
  #2c3e50,
  #16a085,
  #95a5a6,
  #1abc9c,
  #7f8c8d,
  #2ecc71,
  #bdc3c7,
  #e74c3c,
  #2980b9,
  #e67e22,
  #8e44ad,
  #27ae60,
  #ecf0f1,

  #f05b4f,
  #dda458,
  #86797d,
  #6188e2,
  #a748ca
) !default;
